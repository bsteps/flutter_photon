#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: imports

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_manipulate_image(port_: i64, a: *mut wire_ManipulationInput) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "manipulate_image",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            move |task_callback| manipulate_image(api_a)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_greyscale_image(port_: i64, original_bytes: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "greyscale_image",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_original_bytes = original_bytes.wire2api();
            move |task_callback| greyscale_image(api_original_bytes)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_checking(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "checking",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(checking()),
    )
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_ManipulationInput {
    original_bytes: *mut wire_uint_8_list,
    greyscale: bool,
    threshold: bool,
    threshold_amount: u32,
    output_format: i32,
    quality: u8,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_8_list {
    ptr: *mut u8,
    len: i32,
}

// Section: wrapper structs

// Section: static checks

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_box_autoadd_manipulation_input() -> *mut wire_ManipulationInput {
    support::new_leak_box_ptr(wire_ManipulationInput::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_uint_8_list(len: i32) -> *mut wire_uint_8_list {
    let ans = wire_uint_8_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<ManipulationInput> for *mut wire_ManipulationInput {
    fn wire2api(self) -> ManipulationInput {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<ManipulationInput> for wire_ManipulationInput {
    fn wire2api(self) -> ManipulationInput {
        ManipulationInput {
            original_bytes: self.original_bytes.wire2api(),
            greyscale: self.greyscale.wire2api(),
            threshold: self.threshold.wire2api(),
            threshold_amount: self.threshold_amount.wire2api(),
            output_format: self.output_format.wire2api(),
            quality: self.quality.wire2api(),
        }
    }
}

impl Wire2Api<OutputFormat> for i32 {
    fn wire2api(self) -> OutputFormat {
        match self {
            0 => OutputFormat::Png,
            1 => OutputFormat::Jpeg,
            2 => OutputFormat::Gif,
            _ => unreachable!("Invalid variant for OutputFormat: {}", self),
        }
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Vec<u8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}

impl NewWithNullPtr for wire_ManipulationInput {
    fn new_with_null_ptr() -> Self {
        Self {
            original_bytes: core::ptr::null_mut(),
            greyscale: Default::default(),
            threshold: Default::default(),
            threshold_amount: Default::default(),
            output_format: Default::default(),
            quality: Default::default(),
        }
    }
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
    unsafe {
        let _ = support::vec_from_leak_ptr(val.ptr, val.len);
    }
}
